expr    : factor ((MUL | DIV) factor)*
factor  : INTEGER


    Each rule, R, defined in the grammar, becomes a method with the same name,
    and references to that rule become a method call: R().
    The body of the method follows the flow of the body of the rule using the very same guidelines.

    Alternatives (a1 | a2 | aN) become an if-elseif-else statement

    An optional grouping (â€¦)* becomes a while statement that can loop over zero or more times

    Each token reference T becomes a call to the method eat: eat(T).
    The way the eat method works is that it consumes the token T if it matches the current lookahead token,
    then it gets a new token from the lexer and assigns that token to the current_token internal variable.
